# Analizador de Sentimientos - API y Visualización

Este proyecto es una API de análisis de sentimientos basada en FastAPI y un modelo de machine learning entrenado sobre el dataset de IMDb. Incluye una interfaz web (`Visual.html`) para interactuar fácilmente con el modelo.

---

## Características

- **API REST** para análisis de sentimientos de textos individuales o por lotes.
- **Modelo de ML** entrenado con scikit-learn y guardado con joblib.
- **Preprocesamiento consistente** entre entrenamiento y predicción.
- **Interfaz web moderna** para probar el modelo visualmente.
- **Endpoints de salud y de información del modelo**.

---

## Estructura del Proyecto

```
analizadorsentimientos/
│
├── api/
│   ├── main.py           # Entrypoint de la API FastAPI
│   └── predict.py        # Lógica de predicción y carga de modelo
│
├── model/
│   └── train_model.py    # Script de entrenamiento y guardado del modelo
│
├── model/
│   └── model.pkl         # Modelo entrenado (se genera tras entrenar)
│
├── Visual.html           # Interfaz web para análisis de sentimientos
├── requirements.txt      # Dependencias del proyecto
└── README.md             # (Este archivo)
```

---

## Instalación

1. **Clona el repositorio**  
   ```sh
   git clone <url-del-repo>
   cd analizadorsentimientos
   ```

2. **Crea un entorno virtual (opcional pero recomendado)**  
   ```sh
   python -m venv venv
   venv\Scripts\activate
   ```

3. **Instala las dependencias**  
   ```sh
   pip install -r requirements.txt
   ```

4. **Descarga el dataset de IMDb**  
   Descarga `IMDB Dataset.csv` desde [Kaggle](https://www.kaggle.com/datasets/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews) y colócalo en la carpeta `model/`.

---

## Entrenamiento del Modelo

1. Ve a la carpeta `model/`:
   ```sh
   cd model
   ```

2. Ejecuta el script de entrenamiento:
   ```sh
   python train_model.py
   ```
   Esto generará el archivo `model.pkl` en la carpeta `model/`.

---

## Ejecución de la API

1. Ve a la carpeta raíz del proyecto.
2. Ejecuta el servidor:
   ```sh
   uvicorn api.main:app --reload --port 8000
   ```
   La API estará disponible en [http://localhost:8000](http://localhost:8000).

---

## Endpoints Principales

- `POST /predict`  
  Analiza el sentimiento de un texto individual.
- `POST /predict/batch`  
  Analiza el sentimiento de varios textos.
- `GET /model/info`  
  Información sobre el modelo cargado.
- `GET /health`  
  Estado de salud de la API.
- `GET /docs`  
  Documentación interactiva (Swagger UI).

---

## Interfaz Web

1. Abre `Visual.html` en tu navegador.
2. Asegúrate de que la API esté corriendo.
3. Interactúa con el modelo desde la web.

> **Nota:** Si cambias el puerto de la API, edita la variable `API_BASE_URL` en `Visual.html` para que coincida.

---

## Notas y Consejos

- El modelo solo distingue entre **positivo** y **negativo**.
- El preprocesamiento debe ser idéntico en entrenamiento y predicción.
- Si la predicción no es coherente, reentrena el modelo y asegúrate de que `model.pkl` es el correcto.
- Para producción, restringe los orígenes permitidos en CORS.

---

## Créditos

- Basado en FastAPI, scikit-learn, NLTK y el dataset de IMDb de Kaggle.
- Interfaz web desarrollada con HTML, CSS y JavaScript puro.

---

¿Dudas o problemas?  
Abre un issue o contacta al autor.